using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace The_Pianist
{
    class PianistLists
    {
        public PianistLists(string piece, string composer, string key)
        {
            this.Piece = piece;
            this.Composer = composer;
            this.Key = key;
        }
        public string Piece { get; set; }
        public string Composer { get; set; }
        public string Key { get; set; }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            int numberOfPieces = int.Parse(Console.ReadLine());

            List<string> pieces = new List<string>();
            Dictionary<string, PianistLists> dictionaryPieces = new Dictionary<string, PianistLists>();

            for (int i = 0; i < numberOfPieces; i++)
            {
                string temp = Console.ReadLine();
                pieces = temp.Split('|', StringSplitOptions.RemoveEmptyEntries).ToList();
                string piece = pieces[0];
                string composer = pieces[1];
                string key = pieces[2];
                PianistLists listOfPieces = new PianistLists(piece, composer, key);

                if (!dictionaryPieces.ContainsKey(listOfPieces.Piece))
                {
                    dictionaryPieces[listOfPieces.Piece] = listOfPieces;
                }

            }


            string command;

            while ((command = Console.ReadLine()) != "Stop")
            {
                List<string> inputs = command.Split('|', StringSplitOptions.RemoveEmptyEntries).ToList();
                string action = inputs[0];

                if (action == "Add")
                {
                    string piece = inputs[1];
                    string composer = inputs[2];
                    string key = inputs[3];
                    PianistLists listOfPieces = new PianistLists(piece, composer, key);

                    if (!dictionaryPieces.ContainsKey(listOfPieces.Piece))
                    {
                        dictionaryPieces[listOfPieces.Piece] = listOfPieces;
                        Console.WriteLine($"{piece} by {composer} in {key} added to the collection!");
                    }
                    else
                    {
                        Console.WriteLine($"{listOfPieces.Piece} is already in the collection!");
                    }
                }
                else if (action == "Remove")
                {
                    string piece = inputs[1];
                    
                    if (dictionaryPieces.ContainsKey(piece))
                    {
                        dictionaryPieces.Remove(piece);
                        Console.WriteLine($"Successfully removed {piece}!");
                    }
                    else
                    {
                        Console.WriteLine($"Invalid operation! {piece} does not exist in the collection.");
                    }
                }
                else if (action == "ChangeKey")
                {
                    string piece = inputs[1];
                    string newKey = inputs[2];

                    //PianistLists listOfPieces = dictionaryPieces[piece];

                    if (dictionaryPieces.ContainsKey(piece))
                    {
                        PianistLists listOfPieces = dictionaryPieces[piece];
                        listOfPieces.Key = newKey;
                        //dictionaryPieces.Remove(piece);
                        //dictionaryPieces[newKey] = listOfPieces;

                        dictionaryPieces[piece] = listOfPieces;
                        Console.WriteLine($"Changed the key of {piece} to {newKey}!");
                    }
                    else
                    {
                        Console.WriteLine($"Invalid operation! {piece} does not exist in the collection.");
                    }
                }

            }
            foreach (var piece in dictionaryPieces)
            {
                Console.WriteLine($"{piece.Key} -> Composer: {piece.Value.Composer}, Key: {piece.Value.Key}");
            }

        }        
    }
}
